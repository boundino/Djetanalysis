#ifndef _D_JET_TREE_H
#define _D_JET_TREE_H

#include "TTree.h"

#include "D_tree.h"

#include <vector>

const int nEventsToMix = 24;

class DJetTree {
  public:
    DJetTree() {
        isPP = 0;
        run = 0;
        evt = 0;
        lumi = 0;
        hiBin = -1;
        vz = -99;
        weight = -1;

        hiNevtPlane = -1;

        njet_akpu3pf = 0;
        njet_akpu4pf = 0;

        RunNo = 0;
        EvtNo = 0;
        LumiNo = 0;
        Dsize = 0;
        PVx = 0;
        PVy = 0;
        PVz = 0;
        PVnchi2 = 0;
        BSx = 0;
        BSy = 0;
        BSz = 0;
        PVxE = 0;
        PVyE = 0;
        PVzE = 0;
        BSxErr = 0;
        BSyErr = 0;
        BSzErr = 0;
        BSdxdz = 0;
        BSdydz = 0;
        BSdxdzErr = 0;
        BSdydzErr = 0;
        BSWidthX = 0;
        BSWidthXErr = 0;
        BSWidthY = 0;
        BSWidthYErr = 0;
    }
    ~DJetTree() {};

    void link_arrays(DTree dt);
    void create_tree(TTree* t);
    void copy_variables(DTree dt);
    void clear_vectors();

    int isPP;
    uint32_t run;
    unsigned long long evt;
    uint32_t lumi;
    int hiBin;
    float vz;
    float weight;

    int hiNevtPlane;
    float hiEvtPlanes[29];

    int njet_akpu3pf;
    std::vector<float> jetptCorr_akpu3pf;
    std::vector<float> jetpt_akpu3pf;
    std::vector<float> jeteta_akpu3pf;
    std::vector<float> jetphi_akpu3pf;
    std::vector<float> gjetpt_akpu3pf;
    std::vector<float> gjeteta_akpu3pf;
    std::vector<float> gjetphi_akpu3pf;
    std::vector<int> gjetflavor_akpu3pf;
    std::vector<float> chargedSum_akpu3pf;
    std::vector<int> subid_akpu3pf;

    int ngen_akpu3pf;
    std::vector<float> genpt_akpu3pf;
    std::vector<float> geneta_akpu3pf;
    std::vector<float> genphi_akpu3pf;
    std::vector<int> gensubid_akpu3pf;

    int njet_akpu4pf;
    std::vector<float> jetptCorr_akpu4pf;
    std::vector<float> jetpt_akpu4pf;
    std::vector<float> jeteta_akpu4pf;
    std::vector<float> jetphi_akpu4pf;
    std::vector<float> gjetpt_akpu4pf;
    std::vector<float> gjeteta_akpu4pf;
    std::vector<float> gjetphi_akpu4pf;
    std::vector<int> gjetflavor_akpu4pf;
    std::vector<float> chargedSum_akpu4pf;
    std::vector<int> subid_akpu4pf;

    int ngen_akpu4pf;
    std::vector<float> genpt_akpu4pf;
    std::vector<float> geneta_akpu4pf;
    std::vector<float> genphi_akpu4pf;
    std::vector<int> gensubid_akpu4pf;

    Int_t           RunNo;
    Int_t           EvtNo;
    Int_t           LumiNo;
    Int_t           Dsize;
    Float_t         PVx;
    Float_t         PVy;
    Float_t         PVz;
    Float_t         PVnchi2;
    Float_t         BSx;
    Float_t         BSy;
    Float_t         BSz;
    Float_t         PVxE;
    Float_t         PVyE;
    Float_t         PVzE;
    Float_t         BSxErr;
    Float_t         BSyErr;
    Float_t         BSzErr;
    Float_t         BSdxdz;
    Float_t         BSdydz;
    Float_t         BSdxdzErr;
    Float_t         BSdydzErr;
    Float_t         BSWidthX;
    Float_t         BSWidthXErr;
    Float_t         BSWidthY;
    Float_t         BSWidthYErr;

    Int_t*          Dindex;
    Int_t*          Dtype;
    Float_t*        Dmass;
    Float_t*        Dpt;
    Float_t*        Deta;
    Float_t*        Dphi;
    Float_t*        Dy;
    Float_t*        DvtxX;
    Float_t*        DvtxY;
    Float_t*        Dd0;
    Float_t*        Dd0Err;
    Float_t*        Ddxyz;
    Float_t*        DdxyzErr;
    Float_t*        Dchi2ndf;
    Float_t*        Dchi2cl;
    Float_t*        Ddtheta;
    Float_t*        Dlxy;
    Float_t*        Dalpha;
    Float_t*        DsvpvDistance;
    Float_t*        DsvpvDisErr;
    Float_t*        DsvpvDistance_2D;
    Float_t*        DsvpvDisErr_2D;
    Float_t*        DtktkRes_chi2ndf;
    Float_t*        DtktkRes_chi2cl;
    Float_t*        DtktkRes_alpha;
    Float_t*        DtktkRes_svpvDistance;
    Float_t*        DtktkRes_svpvDisErr;
    Float_t*        DlxyBS;
    Float_t*        DlxyBSErr;
    Float_t*        DMaxDoca;
    Float_t*        Dtrk1Pt;
    Float_t*        Dtrk2Pt;
    Float_t*        Dtrk1Eta;
    Float_t*        Dtrk2Eta;
    Float_t*        Dtrk1Phi;
    Float_t*        Dtrk2Phi;
    Float_t*        Dtrk1PtErr;
    Float_t*        Dtrk2PtErr;
    Float_t*        Dtrk1Dxy;
    Float_t*        Dtrk2Dxy;
    Float_t*        Dtrk1PixelHit;
    Float_t*        Dtrk2PixelHit;
    Float_t*        Dtrk1StripHit;
    Float_t*        Dtrk2StripHit;
    Float_t*        Dtrk1nStripLayer;
    Float_t*        Dtrk2nStripLayer;
    Float_t*        Dtrk1nPixelLayer;
    Float_t*        Dtrk2nPixelLayer;
    Float_t*        Dtrk1Chi2ndf;
    Float_t*        Dtrk2Chi2ndf;
    Float_t*        Dtrk1MassHypo;
    Float_t*        Dtrk2MassHypo;
    Int_t*          Dtrk1Algo;
    Int_t*          Dtrk2Algo;
    Int_t*          Dtrk1originalAlgo;
    Int_t*          Dtrk2originalAlgo;
    Bool_t*         Dtrk1highPurity;
    Bool_t*         Dtrk2highPurity;
    Float_t*        Dtrk3Pt;
    Float_t*        Dtrk4Pt;
    Float_t*        Dtrk3Eta;
    Float_t*        Dtrk4Eta;
    Float_t*        Dtrk3Phi;
    Float_t*        Dtrk4Phi;
    Float_t*        Dtrk3PtErr;
    Float_t*        Dtrk4PtErr;
    Float_t*        Dtrk3Dxy;
    Float_t*        Dtrk4Dxy;
    Float_t*        Dtrk3PixelHit;
    Float_t*        Dtrk4PixelHit;
    Float_t*        Dtrk3StripHit;
    Float_t*        Dtrk4StripHit;
    Float_t*        Dtrk3nStripLayer;
    Float_t*        Dtrk4nStripLayer;
    Float_t*        Dtrk3nPixelLayer;
    Float_t*        Dtrk4nPixelLayer;
    Float_t*        Dtrk3Chi2ndf;
    Float_t*        Dtrk4Chi2ndf;
    Float_t*        Dtrk3MassHypo;
    Float_t*        Dtrk4MassHypo;
    Int_t*          Dtrk3Algo;
    Int_t*          Dtrk4Algo;
    Int_t*          Dtrk3originalAlgo;
    Int_t*          Dtrk4originalAlgo;
    Bool_t*         Dtrk3highPurity;
    Bool_t*         Dtrk4highPurity;
    Int_t*          Dtrk1Idx;
    Int_t*          Dtrk2Idx;
    Float_t*        Dtrk1EtaErr;
    Float_t*        Dtrk2EtaErr;
    Float_t*        Dtrk1PhiErr;
    Float_t*        Dtrk2PhiErr;
    Float_t*        Dtrk1Y;
    Float_t*        Dtrk2Y;
    Float_t*        Dtrk1D0Err;
    Float_t*        Dtrk2D0Err;
    Float_t*        Dtrk1MVAVal;
    Float_t*        Dtrk2MVAVal;
    Int_t*          Dtrk1Quality;
    Int_t*          Dtrk2Quality;
    Int_t*          Dtrk3Idx;
    Int_t*          Dtrk4Idx;
    Float_t*        Dtrk3EtaErr;
    Float_t*        Dtrk4EtaErr;
    Float_t*        Dtrk3PhiErr;
    Float_t*        Dtrk4PhiErr;
    Float_t*        Dtrk3Y;
    Float_t*        Dtrk4Y;
    Float_t*        Dtrk3D0Err;
    Float_t*        Dtrk4D0Err;
    Float_t*        Dtrk3MVAVal;
    Float_t*        Dtrk4MVAVal;
    Int_t*          Dtrk3Quality;
    Int_t*          Dtrk4Quality;
    Float_t*        DtktkResmass;
    Float_t*        DtktkRespt;
    Float_t*        DtktkReseta;
    Float_t*        DtktkResphi;
    Float_t*        DRestrk1Pt;
    Float_t*        DRestrk1Eta;
    Float_t*        DRestrk1Phi;
    Float_t*        DRestrk1Y;
    Float_t*        DRestrk1Dxy;
    Float_t*        DRestrk1D0Err;
    Int_t*          DRestrk1originalAlgo;
    Float_t*        DRestrk2Pt;
    Float_t*        DRestrk2Eta;
    Float_t*        DRestrk2Phi;
    Float_t*        DRestrk2Y;
    Float_t*        DRestrk2Dxy;
    Float_t*        DRestrk2D0Err;
    Int_t*          DRestrk2originalAlgo;
    Float_t*        DRestrk3Pt;
    Float_t*        DRestrk3Eta;
    Float_t*        DRestrk3Phi;
    Float_t*        DRestrk3Y;
    Float_t*        DRestrk3Dxy;
    Float_t*        DRestrk3D0Err;
    Int_t*          DRestrk3originalAlgo;
    Float_t*        DRestrk4Pt;
    Float_t*        DRestrk4Eta;
    Float_t*        DRestrk4Phi;
    Float_t*        DRestrk4Y;
    Float_t*        DRestrk4Dxy;
    Float_t*        DRestrk4D0Err;
    Int_t*          DRestrk4originalAlgo;
    Float_t*        Dgen;
    Int_t*          DgenIndex;
    Int_t*          DgennDa;
    Float_t*        Dgenpt;
    Float_t*        Dgeneta;
    Float_t*        Dgenphi;
    Float_t*        Dgeny;
    Int_t*          DgencollisionId;
    Float_t*        DgenBAncestorpt;
    Int_t*          DgenBAncestorpdgId;
};

void DJetTree::link_arrays(DTree dt) {
    Dindex = dt.Dindex;
    Dtype = dt.Dtype;
    Dmass = dt.Dmass;
    Dpt = dt.Dpt;
    Deta = dt.Deta;
    Dphi = dt.Dphi;
    Dy = dt.Dy;
    DvtxX = dt.DvtxX;
    DvtxY = dt.DvtxY;
    Dd0 = dt.Dd0;
    Dd0Err = dt.Dd0Err;
    Ddxyz = dt.Ddxyz;
    DdxyzErr = dt.DdxyzErr;
    Dchi2ndf = dt.Dchi2ndf;
    Dchi2cl = dt.Dchi2cl;
    Ddtheta = dt.Ddtheta;
    Dlxy = dt.Dlxy;
    Dalpha = dt.Dalpha;
    DsvpvDistance = dt.DsvpvDistance;
    DsvpvDisErr = dt.DsvpvDisErr;
    DsvpvDistance_2D = dt.DsvpvDistance_2D;
    DsvpvDisErr_2D = dt.DsvpvDisErr_2D;
    DtktkRes_chi2ndf = dt.DtktkRes_chi2ndf;
    DtktkRes_chi2cl = dt.DtktkRes_chi2cl;
    DtktkRes_alpha = dt.DtktkRes_alpha;
    DtktkRes_svpvDistance = dt.DtktkRes_svpvDistance;
    DtktkRes_svpvDisErr = dt.DtktkRes_svpvDisErr;
    DlxyBS = dt.DlxyBS;
    DlxyBSErr = dt.DlxyBSErr;
    DMaxDoca = dt.DMaxDoca;
    Dtrk1Pt = dt.Dtrk1Pt;
    Dtrk2Pt = dt.Dtrk2Pt;
    Dtrk1Eta = dt.Dtrk1Eta;
    Dtrk2Eta = dt.Dtrk2Eta;
    Dtrk1Phi = dt.Dtrk1Phi;
    Dtrk2Phi = dt.Dtrk2Phi;
    Dtrk1PtErr = dt.Dtrk1PtErr;
    Dtrk2PtErr = dt.Dtrk2PtErr;
    Dtrk1Dxy = dt.Dtrk1Dxy;
    Dtrk2Dxy = dt.Dtrk2Dxy;
    Dtrk1PixelHit = dt.Dtrk1PixelHit;
    Dtrk2PixelHit = dt.Dtrk2PixelHit;
    Dtrk1StripHit = dt.Dtrk1StripHit;
    Dtrk2StripHit = dt.Dtrk2StripHit;
    Dtrk1nStripLayer = dt.Dtrk1nStripLayer;
    Dtrk2nStripLayer = dt.Dtrk2nStripLayer;
    Dtrk1nPixelLayer = dt.Dtrk1nPixelLayer;
    Dtrk2nPixelLayer = dt.Dtrk2nPixelLayer;
    Dtrk1Chi2ndf = dt.Dtrk1Chi2ndf;
    Dtrk2Chi2ndf = dt.Dtrk2Chi2ndf;
    Dtrk1MassHypo = dt.Dtrk1MassHypo;
    Dtrk2MassHypo = dt.Dtrk2MassHypo;
    Dtrk1Algo = dt.Dtrk1Algo;
    Dtrk2Algo = dt.Dtrk2Algo;
    Dtrk1originalAlgo = dt.Dtrk1originalAlgo;
    Dtrk2originalAlgo = dt.Dtrk2originalAlgo;
    Dtrk1highPurity = dt.Dtrk1highPurity;
    Dtrk2highPurity = dt.Dtrk2highPurity;
    Dtrk3Pt = dt.Dtrk3Pt;
    Dtrk4Pt = dt.Dtrk4Pt;
    Dtrk3Eta = dt.Dtrk3Eta;
    Dtrk4Eta = dt.Dtrk4Eta;
    Dtrk3Phi = dt.Dtrk3Phi;
    Dtrk4Phi = dt.Dtrk4Phi;
    Dtrk3PtErr = dt.Dtrk3PtErr;
    Dtrk4PtErr = dt.Dtrk4PtErr;
    Dtrk3Dxy = dt.Dtrk3Dxy;
    Dtrk4Dxy = dt.Dtrk4Dxy;
    Dtrk3PixelHit = dt.Dtrk3PixelHit;
    Dtrk4PixelHit = dt.Dtrk4PixelHit;
    Dtrk3StripHit = dt.Dtrk3StripHit;
    Dtrk4StripHit = dt.Dtrk4StripHit;
    Dtrk3nStripLayer = dt.Dtrk3nStripLayer;
    Dtrk4nStripLayer = dt.Dtrk4nStripLayer;
    Dtrk3nPixelLayer = dt.Dtrk3nPixelLayer;
    Dtrk4nPixelLayer = dt.Dtrk4nPixelLayer;
    Dtrk3Chi2ndf = dt.Dtrk3Chi2ndf;
    Dtrk4Chi2ndf = dt.Dtrk4Chi2ndf;
    Dtrk3MassHypo = dt.Dtrk3MassHypo;
    Dtrk4MassHypo = dt.Dtrk4MassHypo;
    Dtrk3Algo = dt.Dtrk3Algo;
    Dtrk4Algo = dt.Dtrk4Algo;
    Dtrk3originalAlgo = dt.Dtrk3originalAlgo;
    Dtrk4originalAlgo = dt.Dtrk4originalAlgo;
    Dtrk3highPurity = dt.Dtrk3highPurity;
    Dtrk4highPurity = dt.Dtrk4highPurity;
    Dtrk1Idx = dt.Dtrk1Idx;
    Dtrk2Idx = dt.Dtrk2Idx;
    Dtrk1EtaErr = dt.Dtrk1EtaErr;
    Dtrk2EtaErr = dt.Dtrk2EtaErr;
    Dtrk1PhiErr = dt.Dtrk1PhiErr;
    Dtrk2PhiErr = dt.Dtrk2PhiErr;
    Dtrk1Y = dt.Dtrk1Y;
    Dtrk2Y = dt.Dtrk2Y;
    Dtrk1D0Err = dt.Dtrk1D0Err;
    Dtrk2D0Err = dt.Dtrk2D0Err;
    Dtrk1MVAVal = dt.Dtrk1MVAVal;
    Dtrk2MVAVal = dt.Dtrk2MVAVal;
    Dtrk1Quality = dt.Dtrk1Quality;
    Dtrk2Quality = dt.Dtrk2Quality;
    Dtrk3Idx = dt.Dtrk3Idx;
    Dtrk4Idx = dt.Dtrk4Idx;
    Dtrk3EtaErr = dt.Dtrk3EtaErr;
    Dtrk4EtaErr = dt.Dtrk4EtaErr;
    Dtrk3PhiErr = dt.Dtrk3PhiErr;
    Dtrk4PhiErr = dt.Dtrk4PhiErr;
    Dtrk3Y = dt.Dtrk3Y;
    Dtrk4Y = dt.Dtrk4Y;
    Dtrk3D0Err = dt.Dtrk3D0Err;
    Dtrk4D0Err = dt.Dtrk4D0Err;
    Dtrk3MVAVal = dt.Dtrk3MVAVal;
    Dtrk4MVAVal = dt.Dtrk4MVAVal;
    Dtrk3Quality = dt.Dtrk3Quality;
    Dtrk4Quality = dt.Dtrk4Quality;
    DtktkResmass = dt.DtktkResmass;
    DtktkRespt = dt.DtktkRespt;
    DtktkReseta = dt.DtktkReseta;
    DtktkResphi = dt.DtktkResphi;
    DRestrk1Pt = dt.DRestrk1Pt;
    DRestrk1Eta = dt.DRestrk1Eta;
    DRestrk1Phi = dt.DRestrk1Phi;
    DRestrk1Y = dt.DRestrk1Y;
    DRestrk1Dxy = dt.DRestrk1Dxy;
    DRestrk1D0Err = dt.DRestrk1D0Err;
    DRestrk1originalAlgo = dt.DRestrk1originalAlgo;
    DRestrk2Pt = dt.DRestrk2Pt;
    DRestrk2Eta = dt.DRestrk2Eta;
    DRestrk2Phi = dt.DRestrk2Phi;
    DRestrk2Y = dt.DRestrk2Y;
    DRestrk2Dxy = dt.DRestrk2Dxy;
    DRestrk2D0Err = dt.DRestrk2D0Err;
    DRestrk2originalAlgo = dt.DRestrk2originalAlgo;
    DRestrk3Pt = dt.DRestrk3Pt;
    DRestrk3Eta = dt.DRestrk3Eta;
    DRestrk3Phi = dt.DRestrk3Phi;
    DRestrk3Y = dt.DRestrk3Y;
    DRestrk3Dxy = dt.DRestrk3Dxy;
    DRestrk3D0Err = dt.DRestrk3D0Err;
    DRestrk3originalAlgo = dt.DRestrk3originalAlgo;
    DRestrk4Pt = dt.DRestrk4Pt;
    DRestrk4Eta = dt.DRestrk4Eta;
    DRestrk4Phi = dt.DRestrk4Phi;
    DRestrk4Y = dt.DRestrk4Y;
    DRestrk4Dxy = dt.DRestrk4Dxy;
    DRestrk4D0Err = dt.DRestrk4D0Err;
    DRestrk4originalAlgo = dt.DRestrk4originalAlgo;
    Dgen = dt.Dgen;
    DgenIndex = dt.DgenIndex;
    DgennDa = dt.DgennDa;
    Dgenpt = dt.Dgenpt;
    Dgeneta = dt.Dgeneta;
    Dgenphi = dt.Dgenphi;
    Dgeny = dt.Dgeny;
    DgencollisionId = dt.DgencollisionId;
    DgenBAncestorpt = dt.DgenBAncestorpt;
    DgenBAncestorpdgId = dt.DgenBAncestorpdgId;
}

void DJetTree::create_tree(TTree* t) {
    t->Branch("isPP", &isPP, "isPP/I");
    t->Branch("run", &run, "run/i");
    t->Branch("evt", &evt, "evt/l");
    t->Branch("lumi", &lumi, "lumi/i");
    t->Branch("hiBin", &hiBin, "hiBin/I");
    t->Branch("vz", &vz, "vz/F");
    t->Branch("weight", &weight, "weight/F");

    t->Branch("hiNevtPlane", &hiNevtPlane, "hiNevtPlane/I");
    t->Branch("hiEvtPlanes", hiEvtPlanes, "hiEvtPlanes[hiNevtPlane]/F");

    t->Branch("njet_akpu3pf", &njet_akpu3pf, "njet_akpu3pf/I");
    t->Branch("jetptCorr_akpu3pf", &jetptCorr_akpu3pf);
    t->Branch("jetpt_akpu3pf", &jetpt_akpu3pf);
    t->Branch("jeteta_akpu3pf", &jeteta_akpu3pf);
    t->Branch("jetphi_akpu3pf", &jetphi_akpu3pf);
    t->Branch("gjetpt_akpu3pf", &gjetpt_akpu3pf);
    t->Branch("gjeteta_akpu3pf", &gjeteta_akpu3pf);
    t->Branch("gjetphi_akpu3pf", &gjetphi_akpu3pf);
    t->Branch("gjetflavor_akpu3pf", &gjetflavor_akpu3pf);
    t->Branch("chargedSum_akpu3pf", &chargedSum_akpu3pf);
    t->Branch("subid_akpu3pf", &subid_akpu3pf);

    t->Branch("ngen_akpu3pf", &ngen_akpu3pf, "ngen_akpu3pf/I");
    t->Branch("genpt_akpu3pf", &genpt_akpu3pf);
    t->Branch("geneta_akpu3pf", &geneta_akpu3pf);
    t->Branch("genphi_akpu3pf", &genphi_akpu3pf);
    t->Branch("gensubid_akpu3pf", &gensubid_akpu3pf);

    t->Branch("njet_akpu4pf", &njet_akpu4pf, "njet_akpu4pf/I");
    t->Branch("jetptCorr_akpu4pf", &jetptCorr_akpu4pf);
    t->Branch("jetpt_akpu4pf", &jetpt_akpu4pf);
    t->Branch("jeteta_akpu4pf", &jeteta_akpu4pf);
    t->Branch("jetphi_akpu4pf", &jetphi_akpu4pf);
    t->Branch("gjetpt_akpu4pf", &gjetpt_akpu4pf);
    t->Branch("gjeteta_akpu4pf", &gjeteta_akpu4pf);
    t->Branch("gjetphi_akpu4pf", &gjetphi_akpu4pf);
    t->Branch("gjetflavor_akpu4pf", &gjetflavor_akpu4pf);
    t->Branch("chargedSum_akpu4pf", &chargedSum_akpu4pf);
    t->Branch("subid_akpu4pf", &subid_akpu4pf);

    t->Branch("ngen_akpu4pf", &ngen_akpu4pf, "ngen_akpu4pf/I");
    t->Branch("genpt_akpu4pf", &genpt_akpu4pf);
    t->Branch("geneta_akpu4pf", &geneta_akpu4pf);
    t->Branch("genphi_akpu4pf", &genphi_akpu4pf);
    t->Branch("gensubid_akpu4pf", &gensubid_akpu4pf);

    t->Branch("RunNo", &RunNo, "RunNo/I");
    t->Branch("EvtNo", &EvtNo, "EvtNo/I");
    t->Branch("LumiNo", &LumiNo, "LumiNo/I");
    t->Branch("Dsize", &Dsize, "Dsize/I");
    t->Branch("PVx", &PVx, "PVx/F");
    t->Branch("PVy", &PVy, "PVy/F");
    t->Branch("PVz", &PVz, "PVz/F");
    t->Branch("PVnchi2", &PVnchi2, "PVnchi2/F");
    t->Branch("BSx", &BSx, "BSx/F");
    t->Branch("BSy", &BSy, "BSy/F");
    t->Branch("BSz", &BSz, "BSz/F");
    t->Branch("PVxE", &PVxE, "PVxE/F");
    t->Branch("PVyE", &PVyE, "PVyE/F");
    t->Branch("PVzE", &PVzE, "PVzE/F");
    t->Branch("BSxErr", &BSxErr, "BSxErr/F");
    t->Branch("BSyErr", &BSyErr, "BSyErr/F");
    t->Branch("BSzErr", &BSzErr, "BSzErr/F");
    t->Branch("BSdxdz", &BSdxdz, "BSdxdz/F");
    t->Branch("BSdydz", &BSdydz, "BSdydz/F");
    t->Branch("BSdxdzErr", &BSdxdzErr, "BSdxdzErr/F");
    t->Branch("BSdydzErr", &BSdydzErr, "BSdydzErr/F");
    t->Branch("BSWidthX", &BSWidthX, "BSWidthX/F");
    t->Branch("BSWidthXErr", &BSWidthXErr, "BSWidthXErr/F");
    t->Branch("BSWidthY", &BSWidthY, "BSWidthY/F");
    t->Branch("BSWidthYErr", &BSWidthYErr, "BSWidthYErr/F");

    t->Branch("Dindex", Dindex);
    t->Branch("Dtype", Dtype);
    t->Branch("Dmass", Dmass);
    t->Branch("Dpt", Dpt);
    t->Branch("Deta", Deta);
    t->Branch("Dphi", Dphi);
    t->Branch("Dy", Dy);
    t->Branch("DvtxX", DvtxX);
    t->Branch("DvtxY", DvtxY);
    t->Branch("Dd0", Dd0);
    t->Branch("Dd0Err", Dd0Err);
    t->Branch("Ddxyz", Ddxyz);
    t->Branch("DdxyzErr", DdxyzErr);
    t->Branch("Dchi2ndf", Dchi2ndf);
    t->Branch("Dchi2cl", Dchi2cl);
    t->Branch("Ddtheta", Ddtheta);
    t->Branch("Dlxy", Dlxy);
    t->Branch("Dalpha", Dalpha);
    t->Branch("DsvpvDistance", DsvpvDistance);
    t->Branch("DsvpvDisErr", DsvpvDisErr);
    t->Branch("DsvpvDistance_2D", DsvpvDistance_2D);
    t->Branch("DsvpvDisErr_2D", DsvpvDisErr_2D);
    t->Branch("DtktkRes_chi2ndf", DtktkRes_chi2ndf);
    t->Branch("DtktkRes_chi2cl", DtktkRes_chi2cl);
    t->Branch("DtktkRes_alpha", DtktkRes_alpha);
    t->Branch("DtktkRes_svpvDistance", DtktkRes_svpvDistance);
    t->Branch("DtktkRes_svpvDisErr", DtktkRes_svpvDisErr);
    t->Branch("DlxyBS", DlxyBS);
    t->Branch("DlxyBSErr", DlxyBSErr);
    t->Branch("DMaxDoca", DMaxDoca);
    t->Branch("Dtrk1Pt", Dtrk1Pt);
    t->Branch("Dtrk2Pt", Dtrk2Pt);
    t->Branch("Dtrk1Eta", Dtrk1Eta);
    t->Branch("Dtrk2Eta", Dtrk2Eta);
    t->Branch("Dtrk1Phi", Dtrk1Phi);
    t->Branch("Dtrk2Phi", Dtrk2Phi);
    t->Branch("Dtrk1PtErr", Dtrk1PtErr);
    t->Branch("Dtrk2PtErr", Dtrk2PtErr);
    t->Branch("Dtrk1Dxy", Dtrk1Dxy);
    t->Branch("Dtrk2Dxy", Dtrk2Dxy);
    t->Branch("Dtrk1PixelHit", Dtrk1PixelHit);
    t->Branch("Dtrk2PixelHit", Dtrk2PixelHit);
    t->Branch("Dtrk1StripHit", Dtrk1StripHit);
    t->Branch("Dtrk2StripHit", Dtrk2StripHit);
    t->Branch("Dtrk1nStripLayer", Dtrk1nStripLayer);
    t->Branch("Dtrk2nStripLayer", Dtrk2nStripLayer);
    t->Branch("Dtrk1nPixelLayer", Dtrk1nPixelLayer);
    t->Branch("Dtrk2nPixelLayer", Dtrk2nPixelLayer);
    t->Branch("Dtrk1Chi2ndf", Dtrk1Chi2ndf);
    t->Branch("Dtrk2Chi2ndf", Dtrk2Chi2ndf);
    t->Branch("Dtrk1MassHypo", Dtrk1MassHypo);
    t->Branch("Dtrk2MassHypo", Dtrk2MassHypo);
    t->Branch("Dtrk1Algo", Dtrk1Algo);
    t->Branch("Dtrk2Algo", Dtrk2Algo);
    t->Branch("Dtrk1originalAlgo", Dtrk1originalAlgo);
    t->Branch("Dtrk2originalAlgo", Dtrk2originalAlgo);
    t->Branch("Dtrk1highPurity", Dtrk1highPurity);
    t->Branch("Dtrk2highPurity", Dtrk2highPurity);
    t->Branch("Dtrk3Pt", Dtrk3Pt);
    t->Branch("Dtrk4Pt", Dtrk4Pt);
    t->Branch("Dtrk3Eta", Dtrk3Eta);
    t->Branch("Dtrk4Eta", Dtrk4Eta);
    t->Branch("Dtrk3Phi", Dtrk3Phi);
    t->Branch("Dtrk4Phi", Dtrk4Phi);
    t->Branch("Dtrk3PtErr", Dtrk3PtErr);
    t->Branch("Dtrk4PtErr", Dtrk4PtErr);
    t->Branch("Dtrk3Dxy", Dtrk3Dxy);
    t->Branch("Dtrk4Dxy", Dtrk4Dxy);
    t->Branch("Dtrk3PixelHit", Dtrk3PixelHit);
    t->Branch("Dtrk4PixelHit", Dtrk4PixelHit);
    t->Branch("Dtrk3StripHit", Dtrk3StripHit);
    t->Branch("Dtrk4StripHit", Dtrk4StripHit);
    t->Branch("Dtrk3nStripLayer", Dtrk3nStripLayer);
    t->Branch("Dtrk4nStripLayer", Dtrk4nStripLayer);
    t->Branch("Dtrk3nPixelLayer", Dtrk3nPixelLayer);
    t->Branch("Dtrk4nPixelLayer", Dtrk4nPixelLayer);
    t->Branch("Dtrk3Chi2ndf", Dtrk3Chi2ndf);
    t->Branch("Dtrk4Chi2ndf", Dtrk4Chi2ndf);
    t->Branch("Dtrk3MassHypo", Dtrk3MassHypo);
    t->Branch("Dtrk4MassHypo", Dtrk4MassHypo);
    t->Branch("Dtrk3Algo", Dtrk3Algo);
    t->Branch("Dtrk4Algo", Dtrk4Algo);
    t->Branch("Dtrk3originalAlgo", Dtrk3originalAlgo);
    t->Branch("Dtrk4originalAlgo", Dtrk4originalAlgo);
    t->Branch("Dtrk3highPurity", Dtrk3highPurity);
    t->Branch("Dtrk4highPurity", Dtrk4highPurity);
    t->Branch("Dtrk1Idx", Dtrk1Idx);
    t->Branch("Dtrk2Idx", Dtrk2Idx);
    t->Branch("Dtrk1EtaErr", Dtrk1EtaErr);
    t->Branch("Dtrk2EtaErr", Dtrk2EtaErr);
    t->Branch("Dtrk1PhiErr", Dtrk1PhiErr);
    t->Branch("Dtrk2PhiErr", Dtrk2PhiErr);
    t->Branch("Dtrk1Y", Dtrk1Y);
    t->Branch("Dtrk2Y", Dtrk2Y);
    t->Branch("Dtrk1D0Err", Dtrk1D0Err);
    t->Branch("Dtrk2D0Err", Dtrk2D0Err);
    t->Branch("Dtrk1MVAVal", Dtrk1MVAVal);
    t->Branch("Dtrk2MVAVal", Dtrk2MVAVal);
    t->Branch("Dtrk1Quality", Dtrk1Quality);
    t->Branch("Dtrk2Quality", Dtrk2Quality);
    t->Branch("Dtrk3Idx", Dtrk3Idx);
    t->Branch("Dtrk4Idx", Dtrk4Idx);
    t->Branch("Dtrk3EtaErr", Dtrk3EtaErr);
    t->Branch("Dtrk4EtaErr", Dtrk4EtaErr);
    t->Branch("Dtrk3PhiErr", Dtrk3PhiErr);
    t->Branch("Dtrk4PhiErr", Dtrk4PhiErr);
    t->Branch("Dtrk3Y", Dtrk3Y);
    t->Branch("Dtrk4Y", Dtrk4Y);
    t->Branch("Dtrk3D0Err", Dtrk3D0Err);
    t->Branch("Dtrk4D0Err", Dtrk4D0Err);
    t->Branch("Dtrk3MVAVal", Dtrk3MVAVal);
    t->Branch("Dtrk4MVAVal", Dtrk4MVAVal);
    t->Branch("Dtrk3Quality", Dtrk3Quality);
    t->Branch("Dtrk4Quality", Dtrk4Quality);
    t->Branch("DtktkResmass", DtktkResmass);
    t->Branch("DtktkRespt", DtktkRespt);
    t->Branch("DtktkReseta", DtktkReseta);
    t->Branch("DtktkResphi", DtktkResphi);
    t->Branch("DRestrk1Pt", DRestrk1Pt);
    t->Branch("DRestrk1Eta", DRestrk1Eta);
    t->Branch("DRestrk1Phi", DRestrk1Phi);
    t->Branch("DRestrk1Y", DRestrk1Y);
    t->Branch("DRestrk1Dxy", DRestrk1Dxy);
    t->Branch("DRestrk1D0Err", DRestrk1D0Err);
    t->Branch("DRestrk1originalAlgo", DRestrk1originalAlgo);
    t->Branch("DRestrk2Pt", DRestrk2Pt);
    t->Branch("DRestrk2Eta", DRestrk2Eta);
    t->Branch("DRestrk2Phi", DRestrk2Phi);
    t->Branch("DRestrk2Y", DRestrk2Y);
    t->Branch("DRestrk2Dxy", DRestrk2Dxy);
    t->Branch("DRestrk2D0Err", DRestrk2D0Err);
    t->Branch("DRestrk2originalAlgo", DRestrk2originalAlgo);
    t->Branch("DRestrk3Pt", DRestrk3Pt);
    t->Branch("DRestrk3Eta", DRestrk3Eta);
    t->Branch("DRestrk3Phi", DRestrk3Phi);
    t->Branch("DRestrk3Y", DRestrk3Y);
    t->Branch("DRestrk3Dxy", DRestrk3Dxy);
    t->Branch("DRestrk3D0Err", DRestrk3D0Err);
    t->Branch("DRestrk3originalAlgo", DRestrk3originalAlgo);
    t->Branch("DRestrk4Pt", DRestrk4Pt);
    t->Branch("DRestrk4Eta", DRestrk4Eta);
    t->Branch("DRestrk4Phi", DRestrk4Phi);
    t->Branch("DRestrk4Y", DRestrk4Y);
    t->Branch("DRestrk4Dxy", DRestrk4Dxy);
    t->Branch("DRestrk4D0Err", DRestrk4D0Err);
    t->Branch("DRestrk4originalAlgo", DRestrk4originalAlgo);
    t->Branch("Dgen", Dgen);
    t->Branch("DgenIndex", DgenIndex);
    t->Branch("DgennDa", DgennDa);
    t->Branch("Dgenpt", Dgenpt);
    t->Branch("Dgeneta", Dgeneta);
    t->Branch("Dgenphi", Dgenphi);
    t->Branch("Dgeny", Dgeny);
    t->Branch("DgencollisionId", DgencollisionId);
    t->Branch("DgenBAncestorpt", DgenBAncestorpt);
    t->Branch("DgenBAncestorpdgId", DgenBAncestorpdgId);
}

void DJetTree::copy_variables(DTree dt) {
    RunNo = dt.RunNo;
    EvtNo = dt.EvtNo;
    LumiNo = dt.LumiNo;
    Dsize = dt.Dsize;
    PVx = dt.PVx;
    PVy = dt.PVy;
    PVz = dt.PVz;
    PVnchi2 = dt.PVnchi2;
    BSx = dt.BSx;
    BSy = dt.BSy;
    BSz = dt.BSz;
    PVxE = dt.PVxE;
    PVyE = dt.PVyE;
    PVzE = dt.PVzE;
    BSxErr = dt.BSxErr;
    BSyErr = dt.BSyErr;
    BSzErr = dt.BSzErr;
    BSdxdz = dt.BSdxdz;
    BSdydz = dt.BSdydz;
    BSdxdzErr = dt.BSdxdzErr;
    BSdydzErr = dt.BSdydzErr;
    BSWidthX = dt.BSWidthX;
    BSWidthXErr = dt.BSWidthXErr;
    BSWidthY = dt.BSWidthY;
    BSWidthYErr = dt.BSWidthYErr;
}

void DJetTree::clear_vectors() {
    jetptCorr_akpu3pf.clear();
    jetpt_akpu3pf.clear();
    jeteta_akpu3pf.clear();
    jetphi_akpu3pf.clear();
    gjetpt_akpu3pf.clear();
    gjeteta_akpu3pf.clear();
    gjetphi_akpu3pf.clear();
    gjetflavor_akpu3pf.clear();
    chargedSum_akpu3pf.clear();
    subid_akpu3pf.clear();

    genpt_akpu3pf.clear();
    geneta_akpu3pf.clear();
    genphi_akpu3pf.clear();
    gensubid_akpu3pf.clear();

    jetptCorr_akpu4pf.clear();
    jetpt_akpu4pf.clear();
    jeteta_akpu4pf.clear();
    jetphi_akpu4pf.clear();
    gjetpt_akpu4pf.clear();
    gjeteta_akpu4pf.clear();
    gjetphi_akpu4pf.clear();
    gjetflavor_akpu4pf.clear();
    chargedSum_akpu4pf.clear();
    subid_akpu4pf.clear();

    genpt_akpu4pf.clear();
    geneta_akpu4pf.clear();
    genphi_akpu4pf.clear();
    gensubid_akpu4pf.clear();
}

#endif
